; ModuleID = 'mylang2ir' 
declare i32 @printf(i8*, ...)
@print.str = constant [4 x i8] c"%d\0A\00" 

define i32 @main() {
%zero = alloca i32
%expression = alloca i32
%another_expression = alloca i32
%negVal = alloca i32
%cho2 = alloca i32
%a_zero_expression = alloca i32
%cho1 = alloca i32
%step = alloca i32
%posVal = alloca i32

store i32 0, i32* %zero
store i32 0, i32* %expression
store i32 0, i32* %another_expression
store i32 0, i32* %negVal
store i32 0, i32* %cho2
store i32 0, i32* %a_zero_expression
store i32 0, i32* %cho1
store i32 0, i32* %step
store i32 0, i32* %posVal

%t0 = load i32* %zero
%t1 = sub i32 %t0, 17
store i32 %t1, i32* %expression
store i32 20, i32* %step
br label %whcond


whcond:
%t2 = load i32* %another_expression
%t3 = load i32* %a_zero_expression
%t4= mul i32 %t3, 0
%t5 = load i32* %another_expression
%t6= mul i32 0, %t5
%t7 = sub i32 %t4, %t6
%t8 = load i32* %expression
%t9 = add i32 %t8, %t7
%t10 = icmp ne i32 %t9, 0
br i1 %t10, label %whbody, label %whend


whbody:
%t11 = load i32* %expression
%t12 = load i32* %step
%t13 = sub i32 %t11, %t12
store i32 %t13, i32* %posVal
%t14 = load i32* %zero
%t15 = sub i32 %t14, 1
%t16 = load i32* %expression
%t17= mul i32 %t15, %t16
%t18 = sdiv i32 %t17, 2
store i32 %t18, i32* %negVal
br label %choose1
choose1:
%t19 = load i32* %expression
%t20 = load i32* %zero
%t21 = sub i32 %t20, 1
%t22 = load i32* %posVal
%t23 = load i32* %negVal
%t24 = icmp sgt i32 %t19, 0
br i1 %t24, label %greaterEnd1, label %equalCheck1
greaterEnd1:
store i32 %t22, i32* %cho1
br label %end1
equalCheck1:
%t25 = icmp eq i32 %t19, 0
br i1 %t25, label %equalEnd1, label %negativeEnd1
equalEnd1:
store i32 %t21, i32* %cho1
br label %end1
negativeEnd1:
store i32 %t23, i32* %cho1
br label %end1
end1:
%t26 = load i32* %cho1
store i32 %t26, i32* %expression
br label %choose2
choose2:
%t27 = load i32* %step
%t28 = load i32* %step
%t29 = load i32* %zero
%t30 = sub i32 %t29, 1
%t31 = load i32* %step
%t32 = add i32 %t31, 1
%t33 = icmp sgt i32 %t27, 0
br i1 %t33, label %greaterEnd2, label %equalCheck2
greaterEnd2:
store i32 %t30, i32* %cho2
br label %end2
equalCheck2:
%t34 = icmp eq i32 %t27, 0
br i1 %t34, label %equalEnd2, label %negativeEnd2
equalEnd2:
store i32 %t28, i32* %cho2
br label %end2
negativeEnd2:
store i32 %t32, i32* %cho2
br label %end2
end2:
%t35 = load i32* %cho2
store i32 %t35, i32* %step
%t36 = load i32* %expression
call i32 (i8*, ...)* @printf(i8* getelementptr ([4 x i8]* @print.str, i32 0, i32 0), i32 %t36 )
br label %whcond


whend:


ret i32 0

 }
